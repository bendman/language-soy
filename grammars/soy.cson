'scopeName': 'source.soy'
'name': 'Soy Template'
'fileTypes': [
  'soy'
]
'patterns': [
  {
    'begin': '/\\*'
    'name': 'comment.block.js'
    'patterns': [
      {
        'match': '(@param)\\s+(\\w+)'
        'captures': {
          '1': 'name': 'storage.modifier.js'
          '2': 'name': 'variable.parameter.function.js'
        }
      }
    ]
    'end': '\\*/'
  }
  {
    'begin': '//'
    'name': 'comment.line.double-slash.js'
    'end': '\\n'
  }
  {
    'include': '#namespace'
  }
  {
    'include': '#template'
  }
  {
    'include': '#text.html.basic'
  }
]
'repository': {
  'procedures': {
    'patterns': [
      {
        'match': '\\$[\\w\\.]+'
        'name': 'variable.language.js'
      }
      {
        'match': '(==|!=|\\+|-|in)'
        'name': 'keyword.operator.js'
      }
      {
        'match': '\\W(true|false|null|\\d+)'
        'captures': '1': 'name': 'constant.language.js'
      }
      {
        'match': '\\s(\\|(?:insertWordBreaks|noAutoescape|escapeHtml))'
        'name': 'keyword.operator.js'
      }
    ]
  }
  'commands': {
    'patterns': [
      {
        'match': '{(sp|nil|lb|rb|(?:\\\\)(r|n|t))}'
        'captures': '1': 'name': 'constant.language.js'
      }
      {
        'include': '#if'
      }
      {
        'include': '#foreach'
      }
      {
        'begin': '{(/?switch|case|default|print|\/?for)'
        'captures': '1': 'name': 'keyword.control.js'
        'patterns': [
          {
            'include': '#procedures'
          }
        ]
        'end': '}'
      }
      {
        'begin': '{(literal)}'
        'beginCaptures': '1': 'name': 'keyword.control.js'
        'patterns': [
          {
            'include': 'text.html.basic'
          }
        ]
        'end': '{/(literal)}'
        'endCaptures': '1': 'name': 'keyword.control.js'
      }
    ]
  }
  'namespace': {
    'patterns': [
      {
        'begin': '\{(namespace|delpackage)\\s+([\\w\\.]+)'
        'beginCaptures': {
          '1': 'name': 'storage.modifier.js'
          '2': 'name': 'entity.name.function.js'
        }
        'end': '\}'
        'patterns': [
          {
            'include': '#attributes'
          }
        ]
      }
    ]
  }
  'templateName': {
    'match': '(\\.[\\.\\w]+)'
    'captures': {
      '1': 'name': 'entity.name.function.js'
    }
    'name': 'template.name.soy'
  }
  'template': {
    'begin': '\{(template|deltemplate)\\b'
    'beginCaptures': {
      '1': 'name': 'storage.type.function.js'
    }
    'name': 'template.tag.soy'
    'end': '\/(\\1)\}'
    'endCaptures': {
      '1': 'name': 'storage.type.function.js'
    }
    'patterns': [
      {
        'include': '#templateName'
      }
      {
        'include': '#attributes'
      }
      {
        'begin': '(?!<\/(template|deltemplate))(\})'
        'end': '(\{)(?=\/(?:template|deltemplate))'
        'patterns': [
          {
            'include': '#templateContent'
          }
        ]
      }
    ]
  }
  'templateContent': {
    'patterns': [
      {
        'include': 'text.html.basic'
      }
      {
        'include': '#commands'
      }
      {
        'include': '#procedures'
      }
      {
        'include': '#call'
      }

    ]
  }
  'call': {
    'begin': '{/?(call)'
    'captures': '1': 'name': 'keyword.control.js'
    'end': '/?}'
    'patterns': [
      {
        'include': '#templateName'
      }
      {
        'include': '#attributes'
      }
    ]
  }
  'attributes': {
    'patterns': [
      {
        'include': '#attributeSingleQuote'
      }
      {
        'include': '#attributeDoubleQuote'
      }
    ]
  }
  'attributeSingleQuote': {
    'match': '([a-zA-Z0-9:-]+)\\s*(=)\\s*(\'[^\']*\')'
    'captures': {
      '1': 'name': 'entity.other.attribute-name.soy'
      '2': 'name': 'keyword.operator.soy'
      '3': 'name': 'string.quoted.single.soy'
    }
    'name': 'template.attribute.soy'
  }
  'attributeDoubleQuote': {
    'match': '([a-zA-Z0-9:-]+)\\s*(=)\\s*(\"[^\"]*\")'
    'captures': {
      '1': 'name': 'entity.other.attribute-name.soy'
      '2': 'name': 'keyword.operator.soy'
      '3': 'name': 'string.quoted.single.soy'
    }
    'name': 'template.attribute.soy'
  }
  'function': {
    'match': '\\b(isNonnull|isFirst|isLast|index|hasData|length|keys|round|floor|ceiling|min|max|randomInt)\\b'
    'captures': {
      '1': 'name': 'support.function.soy'
    }
    'name': 'function.name.soy'
  }
  'operator': {
    'match': '(==|!=|\\band\\b|\\bor\\b|\\bnot\\b|-|\\+|(?<!\{)\/|\\?:|:)'
    'captures': {
      '1': 'name': 'keyword.operator.soy'
    }
    'name': 'operator.soy'
  }
  'variable': {
    'match': '(\\$[\\w\\.]+)'
    'captures': {
      '1': 'name': 'variable.other.soy'
    }
    'name': 'variable.tag.soy'
  }
  'expression': {
    'patterns': [
      {
        'include': '#function'
      }
      {
        'include': '#operator'
      }
      {
        'include': '#variable'
      }
    ]
  }
  'if': {
    'name': 'if.tag.soy'
    'begin': '\{(if)\\b'
    'beginCaptures': {
      '1': 'name': 'keyword.control.js'
    }
    'end': '\/(if)\}'
    'endCaptures': {
      '1': 'name': 'keyword.control.js'
    }
    'patterns': [
      {
        'include': '#expression'
      }
      {
        'begin': '(?!<\/if)\}'
        'end': '\{(?=\/(?:if))'
        'patterns': [
          {
            'name': 'elseif.tag.soy'
            'begin': '\{(elseif)\\b'
            'beginCaptures': {
              '1': 'name': 'keyword.control.js'
            }
            'end': '\}'
            'patterns': [
              {
                'include': '#expression'
              }
            ]
          }
          {
            'name': 'else.tag.soy'
            'match': '\{(else)\}'
            'captures': {
              '1': 'name': 'keyword.control.js'
            }
          }
          {
            'include': '#templateContent'
          }
        ]
      }
    ]
  }
  'foreach': {
    'name': 'foreach.tag.soy'
    'begin': '\{(foreach)\\b'
    'beginCaptures': {
      '1': 'name': 'keyword.control.js'
    }
    'end': '\/(foreach)\}'
    'endCaptures': {
      '1': 'name': 'keyword.control.js'
    }
    'patterns': [
      {
        'include': '#variable'
      }
      {
        'match': '\\b(in)\\b'
        'captures': {
          '1': 'name': 'keyword.operator.soy'
        }
        'name': 'operator.soy'
      }
      {
        'begin': '(?!<\/foreach)\}'
        'end': '\{(?=\/(?:foreach))'
        'patterns': [
          {
            'name': 'ifempty.tag.soy'
            'match': '\{(ifempty)\}'
            'captures': {
              '1': 'name': 'keyword.control.js'
            }
          }
          {
            'include': '#templateContent'
          }
        ]
      }
    ]
  }
}
