'scopeName': 'text.html.soy'
'name': 'Soy Template'
'fileTypes': [
  'soy'
]
'injections': {
  'text.html.soy': {
    'patterns': [
      {
        'include': '#print'
      }
    ]
  }
}
'patterns': [
  {
    'include': '#namespace'
  }
  {
    'include': '#alias'
  }
  {
    'include': '#templateComment'
  }
  {
    'include': '#template'
  }
  {
    'include': '#comment'
  }
]
'repository': {
  'commands': {
    'patterns': [
      {
        'include': '#special'
      }
      {
        'include': '#if'
      }
      {
        'include': '#foreach'
      }
      {
        'include': '#for'
      }
      {
        'include': '#switch'
      }
      {
        'include': '#literal'
      }
      {
        'include': '#print'
      }
    ]
  }
  'special': {
    'match': '{(sp|nil|lb|rb|(?:\\\\)(r|n|t))}'
    'captures': {
      '1': 'name': 'constant.language.js'
    }
  }
  'comment': {
    'patterns': [
      {
        'name': 'comment.line.double-slash.js'
        'match': '\/\/[^\\n]*\\n?'
      }
      {
        'name': 'comment.block.js'
        'begin': '\/\\*'
        'end': '\\*\/'
      }
    ]
  }
  'namespace': {
    'begin': '\{(namespace|delpackage)\\s+([\\w\\.]+)'
    'beginCaptures': {
      '1': 'name': 'storage.type.function'
      '2': 'name': 'entity.name.section.js'
    }
    'end': '\}'
    'patterns': [
      {
        'include': '#attributes'
      }
    ]
  }
  'alias': {
    'match': '\{(alias)\\s+([\\w\\.]+)(?:\\s+(as)\\s+([\\w\\.]+))?\\s*\}'
    'captures': {
      '1': 'name': 'storage.modifier.js'
      '2': 'name': 'entity.name.function.js'
      '3': 'name': 'keyword.operator.soy'
      '4': 'name': 'entity.name.function.js'
    }
  }
  'template': {
    'name': 'template.tag.soy'
    'begin': '\{(template|deltemplate)\\s+(\\.[\\.\\w]+)'
    'beginCaptures': {
      '1': 'name': 'storage.type.function.js'
      '2': 'name': 'entity.name.function.js'
    }
    'end': '\/(\\1)\}'
    'endCaptures': {
      '1': 'name': 'storage.type.function.js'
    }
    'patterns': [
      {
        'include': '#attributes'
      }
      {
        'begin': '(?!<\/(template|deltemplate))(\})'
        'end': '(\{)(?=\/(?:\\1))'
        'patterns': [
          {
            'include': '#templateContent'
          }
        ]
      }
    ]
  }
  'templateComment': {
    'name': 'comment.block.js'
    'begin': '\/\\*'
    'patterns': [
      {
        'match': '(@param)\\s+(\\w+)'
        'captures': {
          '1': 'name': 'storage.modifier.js'
          '2': 'name': 'variable.parameter.function.js'
        }
      }
    ]
    'end': '\\*\/'
  }
  'templateContent': {
    'patterns': [
      {
        'include': '#templateParam'
      }
      {
        'include': '#call'
      }
      {
        'include': '#msg'
      }
      {
        'include': '#comment'
      }
      {
        'include': '#let'
      }
      {
        'include': '#commands'
      }
      {
        'include': 'text.html.basic'
      }
    ]
  }
  'templateParam': {
    'name': 'template.param.soy'
    'match': '\{(\@param[\?]?)\\s+(\\w+)\\s*(:)\\s*([\\w\\.\\|]+|[\?]|list\<[\\w]+\>|map\<\\w+,\\s*\\w+\>)\\s*\}'
    'captures': {
      '1': 'name': 'storage.type.parameter.soy'
      '2': 'name': 'variable.parameter.soy'
      '3': 'name': 'keyword.operator.soy'
      '4': 'name': 'storage.type.parameter.soy'
    }
  }
  'msg': {
    'name': 'msg.tag.soy'
    'begin': '\{(msg)\\b'
    'beginCaptures': {
      '1': 'name': 'entity.name.tag'
    }
    'end': '\/(\\1)\}'
    'endCaptures': {
      '1': 'name': 'entity.name.tag'
    }
    'patterns': [
      {
        'include': '#attributes'
      }
      {
        'begin': '(?!<\/msg)\}'
        'end': '\{(?=\/msg)'
        'patterns': [
          {
            'include': '#fallbackMsg'
          }
          {
            'include': '#templateContent'
          }
        ]
      }
    ]
  }
  'fallbackMsg': {
    'name': 'fallbackmsg.tag.soy'
    'begin': '\{(fallbackmsg)\\b'
    'beginCaptures': {
      '1': 'name': 'entity.name.tag'
    }
    'end': '\}'
    'patterns': [
      {
        'include': '#attributes'
      }
    ]
  }
  'call': {
    'begin': '{(call|delcall)\\s+([\\.\\w]+)'
    'beginCaptures': {
      '1': 'name': 'keyword.control.js'
      '2': 'name': 'entity.name.function.js'
    }
    'end': '/(\\1)?}'
    'endCaptures': {
      '1': 'name': 'keyword.control.js'
    }
    'patterns': [
      {
        'include': '#attributes'
      }
      {
        'begin': '(?!<\/(call|delcall))\}'
        'end': '\{(?=\/\\1)'
        'patterns': [
          {
            'include': '#callParam'
          }
        ]
      }
    ]
  }
  'callParam': {
    'begin': '\{(param)\\s+([\\w]+)'
    'beginCaptures': {
      '1': 'name': 'keyword.control.js'
      '2': 'name': 'entity.name.function.js'
    }
    'end': '\/(\\1)?\}'
    'endCaptures': {
      '1': 'name': 'keyword.control.js'
    }
    'patterns': [
      {
        'begin': '\:'
        'end': '(?=\/\})'
        'patterns': [
          {
            'include': '#expression'
          }
        ]
      }
      {
        'begin': '\}'
        'end': '\{(?=\/param\})'
        'patterns': [
          {
            'include': '#templateContent'
          }
        ]
      }
      {
        'include': '#attributes'
      }
    ]
  }
  'attributes': {
    'patterns': [
      {
        'name': 'template.attribute.soy'
        'match': '([a-zA-Z0-9:-]+)\\s*(=)\\s*(\'[^\']*\')'
        'captures': {
          '1': 'name': 'entity.other.attribute-name.soy'
          '2': 'name': 'keyword.operator.soy'
          '3': 'name': 'string.quoted.single.soy'
        }
      }
      {
        'name': 'template.attribute.soy'
        'match': '([a-zA-Z0-9:-]+)\\s*(=)\\s*(\"[^\"]*\")'
        'captures': {
          '1': 'name': 'entity.other.attribute-name.soy'
          '2': 'name': 'keyword.operator.soy'
          '3': 'name': 'string.quoted.single.soy'
        }
      }
    ]
  }
  'function': {
    'name': 'function.name.soy'
    'begin': '\\b(isNonnull|isFirst|isLast|index|hasData|length|keys|round|floor|ceiling|min|max|randomInt)\\b\\('
    'beginCaptures': {
      '1': 'name': 'support.function.soy'
    }
    'end': '\\)'
    'patterns': [
      {
        'include': '#expression'
      }
    ]
  }
  'operator': {
    'name': 'operator.soy'
    'match': '(==|!=|\\band\\b|\\bor\\b|\\bnot\\b|-|\\+|(?<!\{)\/|\\?:|:)'
    'captures': {
      '1': 'name': 'keyword.operator.soy'
    }
  }
  'variable': {
    'name': 'variable.tag.soy'
    'match': '(\\$[\\w\\.]+)'
    'captures': {
      '1': 'name': 'variable.other.soy'
    }
  }
  'constant': {
    'match': '\\W?(true|false|null|\\d+)'
    'captures': {
      '1': 'name': 'constant.language.js'
    }
  }
  'string-quoted-single': {
    'name': 'string.quoted.single'
    'match': '(\'[^\']*\')'
    'captures': {
      '1': 'name': 'string.quoted.single.soy'
    }
  }
  'string-quoted-double': {
    'name': 'string.quoted.double'
    'match': '(\"[^\"]*\")'
    'captures': {
      '1': 'name': 'string.quoted.double.soy'
    }
  }
  'expression': {
    'patterns': [
      {
        'include': '#function'
      }
      {
        'include': '#operator'
      }
      {
        'include': '#variable'
      }
      {
        'include': '#constant'
      }
      {
        'include': '#string-quoted-single'
      }
      {
        'include': '#string-quoted-double'
      }
    ]
  }
  'if': {
    'name': 'if.tag.soy'
    'begin': '\{(if)\\b'
    'beginCaptures': {
      '1': 'name': 'keyword.control.js'
    }
    'end': '\/(\\1)\}'
    'endCaptures': {
      '1': 'name': 'keyword.control.js'
    }
    'patterns': [
      {
        'include': '#expression'
      }
      {
        'begin': '(?!<\/if)\}'
        'end': '\{(?=\/(?:if))'
        'patterns': [
          {
            'name': 'elseif.tag.soy'
            'begin': '\{(elseif)\\b'
            'beginCaptures': {
              '1': 'name': 'keyword.control.js'
            }
            'end': '\}'
            'patterns': [
              {
                'include': '#expression'
              }
            ]
          }
          {
            'name': 'else.tag.soy'
            'match': '\{(else)\}'
            'captures': {
              '1': 'name': 'keyword.control.js'
            }
          }
          {
            'include': '#templateContent'
          }
        ]
      }
    ]
  }
  'foreach': {
    'name': 'foreach.tag.soy'
    'begin': '\{(foreach)\\b'
    'beginCaptures': {
      '1': 'name': 'keyword.control.js'
    }
    'end': '\/(\\1)\}'
    'endCaptures': {
      '1': 'name': 'keyword.control.js'
    }
    'patterns': [
      {
        'include': '#variable'
      }
      {
        'match': '\\b(in)\\b'
        'captures': {
          '1': 'name': 'keyword.operator.soy'
        }
        'name': 'operator.soy'
      }
      {
        'begin': '(?!<\/foreach)\}'
        'end': '\{(?=\/(?:foreach))'
        'patterns': [
          {
            'name': 'ifempty.tag.soy'
            'match': '\{(ifempty)\}'
            'captures': {
              '1': 'name': 'keyword.control.js'
            }
          }
          {
            'include': '#templateContent'
          }
        ]
      }
    ]
  }
  'for': {
    'name': 'for.tag.soy'
    'begin': '\{(for)\\b'
    'beginCaptures': {
      '1': 'name': 'keyword.control.js'
    }
    'end': '\/(\\1)\}'
    'endCaptures': {
      '1': 'name': 'keyword.control.js'
    }
    'patterns': [
      {
        'match': '\\b(in)\\s+(range)'
        'captures': {
          '1': 'name': 'keyword.operator.soy'
          '2': 'name': 'support.function.soy'
        }
        'name': 'operator.soy'
      }
      {
        'include': '#expression'
      }
      {
        'begin': '(?!<\/for)\}'
        'end': '\{(?=\/(?:for))'
        'patterns': [
          {
            'include': '#templateContent'
          }
        ]
      }
    ]
  }
  'let': {
    'begin': '\{(let)\\s+(\\$[\\w]+)'
    'beginCaptures': {
      '1': 'name': 'keyword.control.js'
      '2': 'name': 'entity.name.function.js'
    }
    'end': '\/(\\1)?\}'
    'endCaptures': {
      '1': 'name': 'keyword.control.js'
    }
    'patterns': [
      {
        'begin': '\:'
        'end': '(?=\/\})'
        'patterns': [
          {
            'include': '#expression'
          }
        ]
      }
      {
        'begin': '\}'
        'end': '\{(?=\/let\})'
        'patterns': [
          {
            'include': '#templateContent'
          }
        ]
      }
    ]
  }
  'switch': {
    'name': 'switch.tag.soy'
    'begin': '\{(switch)\\b'
    'beginCaptures': {
      '1': 'name': 'keyword.control.js'
    }
    'end': '\/(\\1)\}'
    'endCaptures': {
      '1': 'name': 'keyword.control.js'
    }
    'patterns': [
      {
        'include': '#expression'
      }
      {
        'begin': '\}'
        'end': '\{(?=\/switch\})'
        'patterns': [
          {
            'include': '#switch-case'
          }
          {
            'include': '#switch-default'
          }
          {
            'include': '#templateContent'
          }
        ]
      }
    ]
  }
  'switch-case': {
    'name': 'case.tag.soy'
    'begin': '\{(case)\\b'
    'beginCaptures': {
      '1': 'name': 'keyword.control.js'
    }
    'end': '\}'
    'patterns': [
      {
        'include': '#expression'
      }
    ]
  }
  'switch-default': {
    'name': 'default.tag.soy'
    'match': '\{(default)\}'
    'captures': {
      '1': 'name': 'keyword.control.js'
    }
  }
  'print': {
    'name': 'print.tag.soy'
    'begin': '\{(?:(print)\\s+)?'
    'beginCaptures': {
      '1': 'name': 'keyword.control.js'
    }
    'end': '\}'
    'patterns': [
      {
        'include': '#expression'
      }
      {
        'include': '#print-directive'
      }
    ]
  }
  'print-directive': {
    'name': 'directive.print.tag.soy'
    'match': '\\|\\s*(\\w+)'
    'captures': {
      '1': 'name': 'support.function.soy'
    }
  }
  'literal': {
    'begin': '\{(literal)\}'
    'beginCaptures': {
      '1': 'name': 'keyword.control.js'
    }
    'end': '\{\/(\\1)\}'
    'endCaptures': {
      '1': 'name': 'keyword.control.js'
    }
    'patterns': [
      {
        'include': 'text.html.basic'
      }
    ]
  }
}
