'scopeName': 'text.html.soy'
'name': 'Soy Template'
'fileTypes': [
  'soy'
]
'injections':
  'text.html.soy template.tag.soy - literal.tag.soy':
    'patterns': [
      {
        'include': '#call'
      }
      {
        'include': '#callParam'
      }
      {
        'include': '#msg'
      }
      {
        'include': '#comment'
      }
      {
        'include': '#let'
      }
      {
        'include': '#special'
      }
      {
        'include': '#condition'
      }
      {
        'include': '#loop'
      }
      {
        'include': '#print'
      }
    ]
'patterns': [
  {
    'include': '#namespace'
  }
  {
    'include': '#alias'
  }
  {
    'include': '#templateComment'
  }
  {
    'include': '#template'
  }
  {
    'include': '#comment'
  }
]
'repository':
  'commands':
    'patterns': [

    ]
  'special':
    'match': '{(sp|nil|lb|rb|(?:\\\\)(r|n|t))}'
    'captures':
      '1': 'name': 'constant.language.js'
  'comment':
    'patterns': [
      {
        'name': 'comment.line.double-slash.js'
        'match': '(^|\\s+)\/\/.*$\\n?'
      }
      {
        'name': 'comment.block.js'
        'begin': '\/\\*\\*'
        'end': '\\*\/'
      }
    ]
  'namespace':
    'begin': '\{(namespace|delpackage)\\s+([\\w\\.]+)'
    'beginCaptures':
      '1': 'name': 'storage.type.function'
      '2': 'name': 'entity.name.section.js'
    'end': '\}'
    'patterns': [
      {
        'include': '#attribute'
      }
    ]
  'alias':
    'match': '\{(alias)\\s+([\\w\\.]+)(?:\\s+(as)\\s+([\\w\\.]+))?\\s*\}'
    'captures':
      '1': 'name': 'storage.modifier.js'
      '2': 'name': 'entity.name.function.js'
      '3': 'name': 'storage.modifier.js'
      '4': 'name': 'entity.name.function.js'
  'template':
    'name': 'template.tag.soy'
    'begin': '\{(template|deltemplate)\\s+(\\.[\\.\\w]+)'
    'beginCaptures':
      '1': 'name': 'storage.type.function.js'
      '2': 'name': 'entity.name.function.js'
    'end': '\/(\\1)\}'
    'endCaptures':
      '1': 'name': 'storage.type.function.js'
    'patterns': [
      {
        'include': '#attribute'
      }
      {
        'begin': '(?!<\/(template|deltemplate))(\})'
        'end': '(\{)(?=\/(?:(template|deltemplate)))'
        'patterns': [
          {
            'include': '#templateContent'
          }
        ]
      }
    ]
  'templateComment':
    'name': 'comment.block.js'
    'begin': '\/\\*'
    'patterns': [
      {
        'match': '(@param[\?]?)\\s+(\\w+)'
        'captures':
          '1': 'name': 'storage.modifier.js'
          '2': 'name': 'variable.parameter.function.js'
      }
    ]
    'end': '\\*\/'
  'templateContent':
    'patterns': [
      {
        'include': '#templateParam'
      }
      {
        'include': '#literal'
      }
      {
        'include': 'text.html.basic'
      }
    ]
  'templateParam':
    'name': 'template.param.soy'
    'match': '\{(\@param[\?]?)\\s+(\\w+)\\s*(:)\\s*([\\w\\.\\|]+|[\?]|list\<\\w+\>|map\<\\w+,\\s*\\w+\>)\\s*\}'
    'captures':
      '1': 'name': 'storage.type.parameter.soy'
      '2': 'name': 'variable.parameter.soy'
      '3': 'name': 'keyword.operator.soy'
      '4': 'name': 'storage.type.parameter.soy'
  'msg':
    'name': 'msg.tag.soy'
    'begin': '\{\/?(msg|fallbackmsg)\\b'
    'beginCaptures':
      '1': 'name': 'entity.name.tag'
    'end': '\}'
    'patterns': [
      {
        'include': '#attribute'
      }
    ]
  'call':
    'begin': '\{\/?(call|delcall)(?:\\s+([\\.\\w]+))?'
    'beginCaptures':
      '1': 'name': 'keyword.control.js'
      '2': 'name': 'entity.name.function.js'
    'end': '\}'
    'patterns': [
      {
        'include': '#attribute'
      }
    ]
  'callParam':
    'begin': '\{\/?(param)(?:\\s+(\\w+)(\:)?)?'
    'beginCaptures':
      '1': 'name': 'keyword.control.js'
      '2': 'name': 'entity.name.function.js'
    'end': '\}'
    'patterns': [
      {
        'include': '#expression'
      }
      {
        'include': '#attribute'
      }
    ]
  'attribute':
    'patterns': [
      {
        'name': 'template.attribute.soy'
        'match': '([a-zA-Z0-9:-]+)\\s*(=)\\s*(\'[^\']*\')'
        'captures':
          '1': 'name': 'entity.other.attribute-name.soy'
          '2': 'name': 'keyword.operator.soy'
          '3': 'name': 'string.quoted.single.soy'
      }
      {
        'name': 'template.attribute.soy'
        'match': '([a-zA-Z0-9:-]+)\\s*(=)\\s*(\"[^\"]*\")'
        'captures':
          '1': 'name': 'entity.other.attribute-name.soy'
          '2': 'name': 'keyword.operator.soy'
          '3': 'name': 'string.quoted.single.soy'
      }
    ]
  'function':
    'name': 'function.name.soy'
    'begin': '\\b(\\w+)\\s*\\('
    'beginCaptures':
      '1': 'name': 'support.function.soy'
    'end': '\\)'
    'patterns': [
      {
        'include': '#expression'
      }
    ]
  'operator':
    'name': 'operator.soy'
    'match': '(==|!=|\\band\\b|\\bor\\b|\\bnot\\b|-|\\+|(?<!\{)\/|\\?:|:)'
    'captures':
      '1': 'name': 'keyword.operator.soy'
  'variable':
    'name': 'variable.tag.soy'
    'match': '(\\$[\\w\\.]+)'
    'captures':
      '1': 'name': 'variable.other.soy'
  'constant':
    'match': '\\W?(true|false|null|\\d+)'
    'captures':
      '1': 'name': 'constant.language.js'
  'global':
    'match': '\\b([A-Z0-9_]+)\\b'
    'captures':
      '1': 'name': 'constant.language.js'
  'string-quoted-single':
    'name': 'string.quoted.single'
    'match': '(\'[^\']*\')'
    'captures':
      '1': 'name': 'string.quoted.single.soy'
  'string-quoted-double':
    'name': 'string.quoted.double'
    'match': '(\"[^\"]*\")'
    'captures':
      '1': 'name': 'string.quoted.double.soy'
  'expression':
    'patterns': [
      {
        'include': '#function'
      }
      {
        'include': '#operator'
      }
      {
        'include': '#variable'
      }
      {
        'include': '#constant'
      }
      {
        'include': '#string-quoted-single'
      }
      {
        'include': '#string-quoted-double'
      }
    ]
  'condition':
    'name': 'condition.tag.soy'
    'begin': '\{\/?(if|elseif|else|switch|case|default)\\b'
    'beginCaptures':
      '1': 'name': 'keyword.control.js'
    'end': '\}'
    'patterns': [
      {
        'include': '#expression'
      }
    ]
  'loop':
    'name': 'loop.tag.soy'
    'begin': '\{\/?(for|foreach|ifempty)\\b'
    'beginCaptures':
      '1': 'name': 'keyword.control.js'
    'end': '\}'
    'patterns': [
      {
        'include': '#expression'
      }
    ]
  'let':
    'name': 'let.tag.soy'
    'begin': '\{\/?(let)(?:\\s+(\\$\\w+)\\s*(\:)?\\s*)?'
    'beginCaptures':
      '1': 'name': 'keyword.control.js'
      '2': 'name': 'entity.name.function.js'
    'end': '\}'
    'patterns': [
      {
        'include': '#expression'
      }
    ]
  'print':
    'name': 'print.tag.soy'
    'begin': '\{(?:(print)\\s+)?'
    'beginCaptures':
      '1': 'name': 'keyword.control.js'
    'end': '\}'
    'patterns': [
      {
        'include': '#expression'
      }
      {
        'include': '#global'
      }
      {
        'name': 'directive.print.tag.soy'
        'match': '\\|\\s*(\\w+)'
        'captures':
          '1': 'name': 'support.function.soy'
      }
    ]
  'literal':
    'name': 'literal.tag.soy'
    'begin': '\{(literal)\}'
    'beginCaptures':
      '1': 'name': 'keyword.control.js'
    'end': '\{\/(\\1)\}'
    'endCaptures':
      '1': 'name': 'keyword.control.js'
    'patterns': [
      {
        'include': 'text.html.basic'
      }
    ]
